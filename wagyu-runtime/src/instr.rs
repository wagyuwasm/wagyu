use alloc::vec::Vec;

use crate::module::value::*;

type LaneIdx = u8;
type Offset = u32;
type Align = u32;

pub(crate) enum Instr {
  // control instructions
  Block,
  Loop,
  If,
  Else,
  End,

  Unreachable,
  Nop,
  Br(LabelIdx),
  BrIf(LabelIdx),
  BrTable(Vec<LabelIdx>, LabelIdx),
  Return,
  Call(FuncIdx),
  CallIndirect(TableIdx, TypeIdx),

  // reference instruction
  RefNull(HeapType),
  RefIsNull,
  RefFunc(FuncIdx),

  // parametric instructions
  Drop,
  Select(Vec<ValType>),

  // variable instructions
  LocalGet(LocalIdx),
  LocalSet(LocalIdx),
  LocalTee(LocalIdx),
  GlobalGet(GlobalIdx),
  GlobalSet(GlobalIdx),

  // table instructions
  TableGet(TableIdx),
  TableSet(TableIdx),
  TableSize(TableIdx),
  TableGrow(TableIdx),
  TableFill(TableIdx),
  TableCopy(TableIdx),
  TableInit(TableIdx),
  ElemDrop(TableIdx),

  // memory instructions
  I32Load(MemIdx, Offset, Align),
  I64Load(MemIdx, Offset, Align),
  F32Load(MemIdx, Offset, Align),
  F64Load(MemIdx, Offset, Align),
  I32Load8S(MemIdx, Offset, Align),
  I32Load8U(MemIdx, Offset, Align),
  I32Load16S(MemIdx, Offset, Align),
  I32Load16U(MemIdx, Offset, Align),
  I64Load8S(MemIdx, Offset, Align),
  I64Load8U(MemIdx, Offset, Align),
  I64Load16S(MemIdx, Offset, Align),
  I64Load16U(MemIdx, Offset, Align),
  I64Load32S(MemIdx, Offset, Align),
  I64Load32U(MemIdx, Offset, Align),
  I32Store(MemIdx, Offset, Align),
  I64Store(MemIdx, Offset, Align),
  F32Store(MemIdx, Offset, Align),
  F64Store(MemIdx, Offset, Align),
  I32Store8(MemIdx, Offset, Align),
  I32Store16(MemIdx, Offset, Align),
  I64Store8(MemIdx, Offset, Align),
  I64Store16(MemIdx, Offset, Align),
  I64Store32(MemIdx, Offset, Align),
  MemorySize(MemIdx),
  MemoryGrow(MemIdx),
  MemoryFill(MemIdx),
  MemoryCopy(MemIdx),
  MemoryInit(MemIdx, DataIdx),
  DataDrop(MemIdx, DataIdx),

  // numeric instruction
  I32Const(i32),
  I64Const(i64),
  F32Const(f32),
  F64Const(f64),

  I32Clz,
  I32Ctz,
  I32Popcnt,
  I32Add,
  I32Sub,
  I32Mul,
  I32DivS,
  I32DivU,
  I32RemS,
  I32RemU,
  I32And,
  I32Or,
  I32Xor,
  I32Shl,
  I32ShrS,
  I32ShrU,
  I32Rotl,
  I32Rotr,

  I64Clz,
  I64Ctz,
  I64Popcnt,
  I64Add,
  I64Sub,
  I64Mul,
  I64DivS,
  I64DivU,
  I64RemS,
  I64RemU,
  I64And,
  I64Or,
  I64Xor,
  I64Shl,
  I64ShrS,
  I64ShrU,
  I64Rotl,
  I64Rotr,

  F32Abs,
  F32Neg,
  F32Ceil,
  F32Floor,
  F32Trunc,
  F32Nearest,
  F32Sqrt,
  F32Add,
  F32Sub,
  F32Mul,
  F32Div,
  F32Min,
  F32Max,
  F32Copysign,

  F64Abs,
  F64Neg,
  F64Ceil,
  F64Floor,
  F64Trunc,
  F64Nearest,
  F64Sqrt,
  F64Add,
  F64Sub,
  F64Mul,
  F64Div,
  F64Min,
  F64Max,
  F64Copysign,

  I32Eqz,
  I32Eq,
  I32Ne,
  I32LtS,
  I32LtU,
  I32GtS,
  I32GtU,
  I32LeS,
  I32LeU,
  I32GeS,
  I32GeU,

  I64Eqz,
  I64Eq,
  I64Ne,
  I64LtS,
  I64LtU,
  I64GtS,
  I64GtU,
  I64LeS,
  I64LeU,
  I64GeS,
  I64GeU,

  F32Eq,
  F32Ne,
  F32Lt,
  F32Gt,
  F32Le,
  F32Ge,

  F64Eq,
  F64Ne,
  F64Lt,
  F64Gt,
  F64Le,
  F64Ge,

  I32WrapI64,
  I32TruncF32S,
  I32TruncF32U,
  I32TruncF64S,
  I32TruncF64U,
  I32TruncSatF32S,
  I32TruncSatF32U,
  I32TruncSatF64S,
  I32TruncSatF64U,
  I64ExtendI32S,
  I64ExtendI32U,
  I64TruncF32S,
  I64TruncF32U,
  I64TruncF64S,
  I64TruncF64U,
  I64TruncSatF32S,
  I64TruncSatF32U,
  I64TruncSatF64S,
  I64TruncSatF64U,
  F32ConvertI32S,
  F32ConvertI32U,
  F32ConvertI64S,
  F32ConvertI64U,
  F32DenoteF64,
  F64ConvertI32S,
  F64ConvertI32U,
  F64ConvertI64S,
  F64ConvertI64U,
  F64PromoteF32,
  I32ReinterpretF32,
  I64ReinterpretF64,
  F32ReinterpretI32,
  F64ReinterpretI64,

  I32Extend8S,
  I32Extend16S,
  I64Extend8S,
  I64Extend16S,
  I64Extend32S,

  // vector instruction
  V128Load(MemIdx, Offset, Align),
  V128Load8X8S(MemIdx, Offset, Align),
  V128Load8X8U(MemIdx, Offset, Align),
  V128Load16X4S(MemIdx, Offset, Align),
  V128Load16X4U(MemIdx, Offset, Align),
  V128Load32X2S(MemIdx, Offset, Align),
  V128Load32X2U(MemIdx, Offset, Align),
  V128Load8Splat(MemIdx, Offset, Align),
  V128Load16Splat(MemIdx, Offset, Align),
  V128Load32Splat(MemIdx, Offset, Align),
  V128Load64Splat(MemIdx, Offset, Align),
  V128Load32Zero(MemIdx, Offset, Align),
  V128Load64Zero(MemIdx, Offset, Align),
  V128Store(MemIdx, Offset, Align),
  V128Load8Lane(MemIdx, Offset, Align, LaneIdx),
  V128Load16Lane(MemIdx, Offset, Align, LaneIdx),
  V128Load32Lane(MemIdx, Offset, Align, LaneIdx),
  V128Load64Lane(MemIdx, Offset, Align, LaneIdx),
  V128Store8Lane(MemIdx, Offset, Align, LaneIdx),
  V128Store16Lane(MemIdx, Offset, Align, LaneIdx),
  V128Store32Lane(MemIdx, Offset, Align, LaneIdx),
  V128Store64Lane(MemIdx, Offset, Align, LaneIdx),

  V128Const(V128ConstValue),

  I8X16Shuffle([u8; 16]),
  I8X16Swizzle,

  I8X16Splat,
  I16X8Splat,
  I32X4Splat,
  I64X2Splat,
  F32X4Splat,
  F64X2Splat,

  I8X16ExtractLaneS(LaneIdx),
  I8X16ExtractLaneU(LaneIdx),
  I8X16ReplaceLane(LaneIdx),
  I16X8ExtractLaneS(LaneIdx),
  I16X8ExtractLaneU(LaneIdx),
  I16X8ReplaceLane(LaneIdx),
  I32X4ExtractLane(LaneIdx),
  I32X4ReplaceLane(LaneIdx),
  I64X2ExtractLane(LaneIdx),
  I64X2ReplaceLane(LaneIdx),
  F32X4ExtractLane(LaneIdx),
  F32X4ReplaceLane(LaneIdx),
  F64X2ExtractLane(LaneIdx),
  F64X2ReplaceLane(LaneIdx),

  I8X16Eq,
  I8X16Ne,
  I8X16LtS,
  I8X16LtU,
  I8X16GtS,
  I8X16GtU,
  I8X16LeS,
  I8X16LeU,
  I8X16GeS,
  I8X16GeU,

  I16X8Eq,
  I16X8Ne,
  I16X8LtS,
  I16X8LtU,
  I16X8GtS,
  I16X8GtU,
  I16X8LeS,
  I16X8LeU,
  I16X8GeS,
  I16X8GeU,

  I32X4Eq,
  I32X4Ne,
  I32X4LtS,
  I32X4LtU,
  I32X4GtS,
  I32X4GtU,
  I32X4LeS,
  I32X4LeU,
  I32X4GeS,
  I32X4GeU,

  I64X2Eq,
  I64X2Ne,
  I64X2LtS,
  I64X2GtS,
  I64X2LeS,
  I64X2GeS,

  F32X4Eq,
  F32X4Ne,
  F32X4Lt,
  F32X4Gt,
  F32X4Le,
  F32X4Ge,

  F64X2Eq,
  F64X2Ne,
  F64X2Lt,
  F64X2Gt,
  F64X2Le,
  F64X2Ge,

  V128Not,
  V128And,
  V128Andnot,
  V128Or,
  V128Xor,
  V128Bitselect,
  V128AnyTrue,

  I8X16Abs,
  I8X16Neg,
  I8X16AllTrue,
  I8X16Bitmask,
  I8X16NarrowI16X8S,
  I8X16NarrowI16X8U,
  I8X16Shl,
  I8X16ShrS,
  I8X16ShrU,
  I8X16Add,
  I8X16AddSetS,
  I8X16AddSetU,
  I8X16Sub,
  I8X16SubSatS,
  I8X16SubSatU,
  I8X16MinS,
  I8X16MinU,
  I8X16MaxS,
  I8X16MaxU,
  I8X16AvgrU,
  I8X16Popcnt,

  I16X8Abs,
  I16X8Neg,
  I16X8AllTrue,
  I16X8Bitmask,
  I16X8NarrowI32X4S,
  I16X8NarrowI32X4U,
  I16X8ExtendLowI8X16S,
  I16X8ExtendHighI8X16S,
  I16X8ExtendLowI8X16U,
  I16X8ExtendHighI8X16U,
  I16X8Shl,
  I16X8ShrS,
  I16X8ShrU,
  I16X8Add,
  I16X8AddSetS,
  I16X8AddSetU,
  I16X8Sub,
  I16X8SubSatS,
  I16X8SubSatU,
  I16X8Mul,
  I16X8MinS,
  I16X8MinU,
  I16X8MaxS,
  I16X8MaxU,
  I16X8AvgrU,
  I16X8Q15MulrSatS,
  I16X8ExtmulLowI8X16S,
  I16X8ExtmulHighI8X16S,
  I16X8ExtmulLowI8X16U,
  I16X8ExtmulHighI8X16U,
  I16X8ExtaddPairwiseI8X16S,
  I16X8ExtaddPairwiseI8X16U,

  I32X4Abs,
  I32X4Neg,
  I32X4AllTrue,
  I32X4Bitmask,
  I32X4ExtaddPairwiseI16X8S,
  I32X4ExtendLowI16X8S,
  I32X4ExtendHighI16X8S,
  I32X4ExtendLowI16X8U,
  I32X4ExtendHighI16X8U,
  I32X4Shl,
  I32X4ShrS,
  I32X4ShrU,
  I32X4Add,
  I32X4Sub,
  I32X4Mul,
  I32X4MinS,
  I32X4MinU,
  I32X4MaxS,
  I32X4MaxU,
  I32X4DotI16X8S,
  I32X4ExtmulLowI16X8S,
  I32X4ExtmulHighI16X8S,
  I32X4ExtmulLowI16X8U,
  I32X4ExtmulHighI16X8U,

  I64X2Abs,
  I64X2Neg,
  I64X2AllTrue,
  I64X2Bitmask,
  I64X2ExtendLowI32X4S,
  I64X2ExtendHighI32X4S,
  I64X2ExtendLowI32X4U,
  I64X2ExtendHighI32X4U,
  I64X2Shl,
  I64X2ShrS,
  I64X2ShrU,
  I64X2Add,
  I64X2Sub,
  I64X2Mul,
  I64X2ExtmulLowI32X4S,
  I64X2ExtmulHighI32X4S,
  I64X2ExtmulLowI32X4U,
  I64X2ExtmulHighI32X4U,

  F32X4Abs,
  F32X4Neg,
  F32X4Sqrt,
  F32X4Ceil,
  F32X4Floor,
  F32X4Trunc,
  F32X4Nearest,
  F32X4Add,
  F32X4Sub,
  F32X4Mul,
  F32X4Div,
  F32X4Min,
  F32X4Max,
  F32X4Pmin,
  F32X4Pmax,

  F64X2Abs,
  F64X2Neg,
  F64X2Sqrt,
  F64X2Ceil,
  F64X2Floor,
  F64X2Trunc,
  F64X2Nearest,
  F64X2Add,
  F64X2Sub,
  F64X2Mul,
  F64X2Div,
  F64X2Min,
  F64X2Max,
  F64X2Pmin,
  F64X2Pmax,

  I32X4TruncSatF32X4S,
  I32X4TruncSatF32X4U,
  I32X4TruncSatF32X4SZero,
  I32X4TruncSatF32X4UZero,
  F32X4ConvertI32X4S,
  F32X4ConvertI32X4U,
  F64X2ConvertLowI32X4S,
  F64X2ConvertLowI32X4U,
  F32X4DemoteF64X2Zero,
  F64X2PromoteLowF32X4,
}
